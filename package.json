{
  "name": "text-tokenizer",
  "displayName": "Text Tokenizer (localization)",
  "publisher": "vkrepkiy",
  "description": "Replace text with tokens, generate list of changes, get inline token-to-value hints",
  "version": "0.0.9",
  "license": "MIT",
  "icon": "icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/vkrepkiy/vsc-text-tokenizer.git"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "localization",
    "tokenization",
    "internationalization",
    "i18n",
    "l10n"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "text-tokenizer.replace-with-token",
        "title": "Replace selection with a token",
        "shortTitle": "Replace",
        "category": "Text tokenizer",
        "icon": "$(replace-all)"
      },
      {
        "command": "text-tokenizer.generate-results",
        "title": "Preview tokenization results",
        "shortTitle": "Preview tokenization",
        "category": "Text tokenizer",
        "icon": "$(eye)"
      },
      {
        "command": "text-tokenizer.generate-results-and-drop",
        "title": "Finish tokenization",
        "shortTitle": "Finish tokenization",
        "category": "Text tokenizer",
        "icon": "$(check-all)"
      },
      {
        "command": "text-tokenizer.fetch-external-token-storage",
        "title": "Refresh external token storage",
        "shortTitle": "Refresh ext. tokens",
        "category": "Text tokenizer",
        "icon": "$(refresh)"
      },
      {
        "command": "text-tokenizer.tokenization-progress.copy-token",
        "title": "Copy token",
        "category": "Text tokenizer",
        "icon": "$(symbol-type-parameter)",
        "enablement": "view == text-tokenizer.tokenizationProgressUI"
      },
      {
        "command": "text-tokenizer.tokenization-progress.copy-value",
        "title": "Copy value",
        "category": "Text tokenizer",
        "icon": "$(symbol-text)",
        "enablement": "view == text-tokenizer.tokenizationProgressUI"
      },
      {
        "command": "text-tokenizer.tokenization-progress.remove-token",
        "title": "Remove token",
        "shortTitle": "Remove",
        "category": "Text tokenizer",
        "icon": "$(trash)",
        "enablement": "view == text-tokenizer.tokenizationProgressUI"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "!editorReadonly && editorHasSelection",
          "command": "text-tokenizer.replace-with-token"
        }
      ],
      "view/title": [
        {
          "command": "text-tokenizer.generate-results",
          "when": "view == text-tokenizer.tokenizationProgressUI",
          "group": "navigation"
        },
        {
          "command": "text-tokenizer.generate-results-and-drop",
          "when": "view == text-tokenizer.tokenizationProgressUI"
        }
      ],
      "view/item/context": [
        {
          "command": "text-tokenizer.tokenization-progress.copy-token",
          "when": "view == text-tokenizer.tokenizationProgressUI && viewItem == token",
          "group": "inline"
        },
        {
          "command": "text-tokenizer.tokenization-progress.copy-value",
          "when": "view == text-tokenizer.tokenizationProgressUI && viewItem == token",
          "group": "inline"
        },
        {
          "command": "text-tokenizer.tokenization-progress.remove-token",
          "when": "view == text-tokenizer.tokenizationProgressUI && viewItem == token"
        }
      ]
    },
    "viewsContainers": {
      "panel": [
        {
          "id": "text-tokenizer",
          "title": "Text Tokenizer",
          "icon": "$(symbol-type-parameter)"
        }
      ]
    },
    "views": {
      "text-tokenizer": [
        {
          "id": "text-tokenizer.tokenizationProgressUI",
          "name": "Tokenization progress",
          "type": "tree",
          "visibility": "visible"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Text tokenizer",
      "properties": {
        "text-tokenizer.tokenWrapper": {
          "type": "string",
          "default": "{{ $translate(\"%token%\") }}",
          "description": "Default wrapper for the token. Use %token% to indicate the place for token insertion."
        },
        "text-tokenizer.tokenWrappersByLanguageId": {
          "type": "object",
          "default": {
            "html": "{{ $translate(\"%token%\") }}",
            "typescript": "useTranslator(\"%token%\")"
          },
          "description": "Token wrappers defined by the Language ID (see https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_change-language-mode). Use %token% to indicate the place for token insertion."
        },
        "text-tokenizer.tokenLookupRegExps": {
          "type": "array",
          "default": [
            "$translate\\([\\n\\s\\r]*?(['\"`])(?<token>.+?)\\1",
            "useTranslator\\([\\n\\s\\r]*?(['\"`])(?<token>.+?)\\1"
          ],
          "description": "Regexps to detect tokens in files. Should expose a capturing group named 'token'"
        },
        "text-tokenizer.tokenCollectionGetter": {
          "type": [
            "json-map",
            "json-array",
            "string"
          ],
          "default": "json-map",
          "description": "Path to the file which has a default export of token getter function",
          "markdownDescription": "Getter preset or path to the file with default export of a getter function. \n - `json-map` would handle JSON file in `{ \"your.token\": \"Text value\" }` format \n - `json-array` would handle JSON file in `{ token: \"your.token\", value: \"Text value\" }[]` format \n - `/abs/path/to/exported/function.js` should return JSON like the one expected when using `json-array` formatter preset. See README for more details."
        },
        "text-tokenizer.resultGeneratorPath": {
          "type": "string",
          "default": "",
          "description": "Path (absolute) to the file which has a default export of result generator function (see examples in README)"
        },
        "text-tokenizer.tokenCollectionPath": {
          "type": "string",
          "default": "",
          "description": "File under this path would be watched and `tokenCollectionGetter` function would be triggered on changes. Required when `tokenCollectionGetter` is defined."
        },
        "text-tokenizer.inlineHints": {
          "type": "boolean",
          "default": true,
          "description": "Activate inline hints (missing token value and previews)"
        },
        "text-tokenizer.disableInlineHintsFor": {
          "type": "array",
          "default": [],
          "description": "Disable inline hints by Language ID (see https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_change-language-mode)."
        },
        "text-tokenizer.trimQuotes": {
          "type": "boolean",
          "default": true,
          "description": "Removes equal leading and trailing quotation marks ( ' \" ` ) from a selected value"
        },
        "text-tokenizer.trimWhitespace": {
          "type": "boolean",
          "default": true,
          "description": "Removes the leading and trailing white space and line terminator characters from a selected value"
        },
        "text-tokenizer.inlineValueCSS": {
          "type": "string",
          "default": "position: relative;display: inline-block;margin: 0 5px 0 5px;padding: 0 5px 0 5px;border-radius: 5px;vertical-align: middle;opacity: 0.6;max-width: 150px;overflow: hidden;text-overflow: ellipsis;",
          "description": "CSS to be applied to inline hints when value is found"
        },
        "text-tokenizer.inlineValueNotFoundCSS": {
          "type": "string",
          "default": "position: relative;display: inline-block;vertical-align: middle;margin: 0 5px 0 5px;opacity: 0.6;",
          "description": "CSS to be applied to inline hints when value is not found"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "pnpm run compile",
    "compile": "tsc -p ./tsconfig.build.json",
    "compile:test": "tsc -p ./tsconfig.json",
    "watch": "tsc -watch -p ./",
    "pretest": "pnpm run compile:test && pnpm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.0",
    "@types/node": "16.x",
    "@types/vscode": "^1.73.0",
    "@typescript-eslint/eslint-plugin": "^5.42.0",
    "@typescript-eslint/parser": "^5.42.0",
    "@vscode/test-electron": "^2.2.0",
    "eslint": "^8.26.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "sinon": "^14.0.2",
    "typescript": "^4.8.4"
  },
  "dependencies": {
    "@types/sinon": "^10.0.13"
  }
}
